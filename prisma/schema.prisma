generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Driver {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  plate       String?   @unique
  carType     String?
  phoneNumber String?
  userEmail   String?   @unique
  fullName    String?
  gender      String?
  dob         String?
  model       String?
  user        User?     @relation(fields: [userEmail], references: [email])

  @@map("driver")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  fullName  String
  email     String    @unique
  role      String
  driver    Driver?

  @@map("user")
}

model Booking {
  id                Int      @id @default(autoincrement())
  userFullName      String
  userEmail         String
  userStart         String
  userDestination   String
  userLat           Int
  userLong          Float
  userCreateAt      DateTime
  driverFullName    String
  driverEmail       String
  driverStart       String
  driverDestination String
  driverLat         Int
  driverLong        Float
  driverCreateAt    DateTime
  driverGender      String
  deliverType       String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  carType           String
  plate             String
  capacity          Int
  price             Int

  @@map("booking")
}

model Emergency {
  id            Int    @id @default(autoincrement())
  passengerName String
  driverName    String
  message       String

  @@map("emergency")
}

model Feedback {
  id          Int       @id @default(autoincrement())
  ratingScore Int?
  description String?
  createdAt   DateTime? @default(now())
  driverEmail String?
  userEmail   String?

  @@map("feedback")
}

model Report {
  id          Int         @id @default(autoincrement())
  driverEmail String
  userEmail   String
  problemType String
  description String
  ReportFile  ReportFile?

  @@map("report")
}

model ReportFile {
  id       Int    @id @default(autoincrement())
  reportId Int    @unique
  fileUrl  String
  report   Report @relation(fields: [reportId], references: [id])

  @@map("report_file")
}

model EnumGender {
  value       String  @id @unique
  description String?

  @@map("enum_genders")
}

model EnumProblem {
  value       String  @id @unique
  description String?

  @@map("enum_problems")
}

model EnumCarType {
  value       String  @id @unique
  description String?

  @@map("enum_car_types")
}
